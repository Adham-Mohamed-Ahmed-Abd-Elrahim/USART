
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000420  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093e  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000666  00000000  00000000  00000e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ea  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015d  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
		uint8_t x;
		char c;
int main(void)
{

	USART_INI(  NORMAL,9600);
  92:	40 e8       	ldi	r20, 0x80	; 128
  94:	55 e2       	ldi	r21, 0x25	; 37
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 96 00 	call	0x12c	; 0x12c <USART_INI>
	USART_MOOD(  ASYNC,   NO_CLK);
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_MOOD>
	USART_DATA_SETTING(  EIGHT,NO_PARITY,ONE);
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	88 e0       	ldi	r24, 0x08	; 8
  ae:	0e 94 41 01 	call	0x282	; 0x282 <USART_DATA_SETTING>
	val=UBRRH;
  b2:	80 b5       	in	r24, 0x20	; 32
	val=(val<<8);
  b4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <val>
  b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <val+0x1>
	val=UBRRL;
  bc:	89 b1       	in	r24, 0x09	; 9
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <val+0x1>
  c4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <val>
	DDRD=0b00000010;
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	81 bb       	out	0x11, r24	; 17
	ucsra=UCSRA;
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ucsra>
    {//c=USART_RECIVE();
	//	x=UDR;
	/*for(uint8_t i=0;i<5;i++)
	{USART_TRASMIT(message[i]);}*/
		
		c=USART_RECIVE();
  d2:	0e 94 3d 01 	call	0x27a	; 0x27a <USART_RECIVE>
  d6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <c>
USART_TRASMIT(c);
  da:	0e 94 39 01 	call	0x272	; 0x272 <USART_TRASMIT>
USART_TRASMIT('\n');
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	0e 94 39 01 	call	0x272	; 0x272 <USART_TRASMIT>
  e4:	f6 cf       	rjmp	.-20     	; 0xd2 <main+0x40>

000000e6 <USART_MOOD>:
 *  Author: ADHM
 */ 
#include "USART.h"

void USART_MOOD(USART_COMMANDS Choice,USART_COMMANDS CLK_POL)
{switch(Choice)
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	19 f0       	breq	.+6      	; 0xf0 <USART_MOOD+0xa>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	41 f0       	breq	.+16     	; 0xfe <USART_MOOD+0x18>
  ee:	17 c0       	rjmp	.+46     	; 0x11e <USART_MOOD+0x38>
	{//Choose USCRC TO WRITE IN IT INSTEAD OF UBRRH
		SET_BIT(UCSRC,URSEL);
		//ASYNC
		case ASYNC:
		//choosing async mode
		CLR_BIT(UCSRC,UMSEL);
  f0:	80 b5       	in	r24, 0x20	; 32
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	80 bd       	out	0x20, r24	; 32
		//Turn_off clock polarity*
		CLR_BIT(UCSRC,UCPOL);break;
  f6:	80 b5       	in	r24, 0x20	; 32
  f8:	8e 7f       	andi	r24, 0xFE	; 254
  fa:	80 bd       	out	0x20, r24	; 32
  fc:	08 95       	ret
		//SYNC
        case SYNC:
		//turn off double speed as it's only for async
		CLR_BIT(UCSRC,U2X);
  fe:	80 b5       	in	r24, 0x20	; 32
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	80 bd       	out	0x20, r24	; 32
		//choose sync mode
		SET_BIT(UCSRC,UMSEL);
 104:	80 b5       	in	r24, 0x20	; 32
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 bd       	out	0x20, r24	; 32
		//T-RISE R-FALL
		if(CLK_POL==0){CLR_BIT(UCSRC,UCPOL);}
 10a:	61 11       	cpse	r22, r1
 10c:	04 c0       	rjmp	.+8      	; 0x116 <USART_MOOD+0x30>
 10e:	80 b5       	in	r24, 0x20	; 32
 110:	8e 7f       	andi	r24, 0xFE	; 254
 112:	80 bd       	out	0x20, r24	; 32
 114:	08 95       	ret
				//T-FALL R-RISE
		else{CLR_BIT(UCSRC,UCPOL);}
 116:	80 b5       	in	r24, 0x20	; 32
 118:	8e 7f       	andi	r24, 0xFE	; 254
 11a:	80 bd       	out	0x20, r24	; 32
 11c:	08 95       	ret
			break;
			default://choosing async mode
			CLR_BIT(UCSRC,UMSEL);
 11e:	80 b5       	in	r24, 0x20	; 32
 120:	8f 7b       	andi	r24, 0xBF	; 191
 122:	80 bd       	out	0x20, r24	; 32
			//Turn_off clock polarity*
			CLR_BIT(UCSRC,UCPOL);break;
 124:	80 b5       	in	r24, 0x20	; 32
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	80 bd       	out	0x20, r24	; 32
 12a:	08 95       	ret

0000012c <USART_INI>:
		}
		}
		//******************************************************************************************************************
	void USART_INI( USART_COMMANDS Baud_rate_mode,unsigned long baud)
	{//ENABLING RECIVING AND TRANSMITTING
	SET_BIT(UCSRB,RXEN);
 12c:	54 9a       	sbi	0x0a, 4	; 10
	SET_BIT(UCSRB,TXEN);
 12e:	53 9a       	sbi	0x0a, 3	; 10
	//UCSRA=0b00000000;
	
	switch( Baud_rate_mode)
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	81 f1       	breq	.+96     	; 0x194 <USART_INI+0x68>
 134:	20 f0       	brcs	.+8      	; 0x13e <USART_INI+0x12>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	09 f4       	brne	.+2      	; 0x13c <USART_INI+0x10>
 13a:	53 c0       	rjmp	.+166    	; 0x1e2 <USART_INI+0xb6>
 13c:	6f c0       	rjmp	.+222    	; 0x21c <USART_INI+0xf0>
	{ case NORMAL ://USART_BAUDRATE*=16;  REG_VAL=BAUD_PRESCALE;break;
		UBRRL =BAUD_PRESCALE_NORMAL;CLR_BIT(UCSRC,URSEL);UBRRH = (BAUD_PRESCALE_NORMAL >> 8);		break;
 13e:	db 01       	movw	r26, r22
 140:	ca 01       	movw	r24, r20
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	aa 1f       	adc	r26, r26
 148:	bb 1f       	adc	r27, r27
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	aa 1f       	adc	r26, r26
 150:	bb 1f       	adc	r27, r27
 152:	9c 01       	movw	r18, r24
 154:	ad 01       	movw	r20, r26
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	44 1f       	adc	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	44 1f       	adc	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	72 e1       	ldi	r23, 0x12	; 18
 16a:	8a e7       	ldi	r24, 0x7A	; 122
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 b2 01 	call	0x364	; 0x364 <__udivmodsi4>
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	82 0f       	add	r24, r18
 176:	89 b9       	out	0x09, r24	; 9
 178:	80 b5       	in	r24, 0x20	; 32
 17a:	8f 77       	andi	r24, 0x7F	; 127
 17c:	80 bd       	out	0x20, r24	; 32
 17e:	da 01       	movw	r26, r20
 180:	c9 01       	movw	r24, r18
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	a1 09       	sbc	r26, r1
 186:	b1 09       	sbc	r27, r1
 188:	89 2f       	mov	r24, r25
 18a:	9a 2f       	mov	r25, r26
 18c:	ab 2f       	mov	r26, r27
 18e:	bb 27       	eor	r27, r27
 190:	80 bd       	out	0x20, r24	; 32
 192:	08 95       	ret
	  case DOUBLE: UBRRL =BAUD_PRESCALE_DOUBLE;CLR_BIT(UCSRC,URSEL);UBRRH = (BAUD_PRESCALE_DOUBLE >> 8);break;
 194:	db 01       	movw	r26, r22
 196:	ca 01       	movw	r24, r20
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	aa 1f       	adc	r26, r26
 19e:	bb 1f       	adc	r27, r27
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	aa 1f       	adc	r26, r26
 1a6:	bb 1f       	adc	r27, r27
 1a8:	9c 01       	movw	r18, r24
 1aa:	ad 01       	movw	r20, r26
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	44 1f       	adc	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	72 e1       	ldi	r23, 0x12	; 18
 1b8:	8a e7       	ldi	r24, 0x7A	; 122
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 b2 01 	call	0x364	; 0x364 <__udivmodsi4>
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	82 0f       	add	r24, r18
 1c4:	89 b9       	out	0x09, r24	; 9
 1c6:	80 b5       	in	r24, 0x20	; 32
 1c8:	8f 77       	andi	r24, 0x7F	; 127
 1ca:	80 bd       	out	0x20, r24	; 32
 1cc:	da 01       	movw	r26, r20
 1ce:	c9 01       	movw	r24, r18
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	a1 09       	sbc	r26, r1
 1d4:	b1 09       	sbc	r27, r1
 1d6:	89 2f       	mov	r24, r25
 1d8:	9a 2f       	mov	r25, r26
 1da:	ab 2f       	mov	r26, r27
 1dc:	bb 27       	eor	r27, r27
 1de:	80 bd       	out	0x20, r24	; 32
 1e0:	08 95       	ret
	  case SYNC: UBRRL =BAUD_PRESCALE_SYNC;CLR_BIT(UCSRC,URSEL);UBRRH = (BAUD_PRESCALE_SYNC>> 8);break;
 1e2:	9a 01       	movw	r18, r20
 1e4:	ab 01       	movw	r20, r22
 1e6:	22 0f       	add	r18, r18
 1e8:	33 1f       	adc	r19, r19
 1ea:	44 1f       	adc	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	72 e1       	ldi	r23, 0x12	; 18
 1f2:	8a e7       	ldi	r24, 0x7A	; 122
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 b2 01 	call	0x364	; 0x364 <__udivmodsi4>
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	82 0f       	add	r24, r18
 1fe:	89 b9       	out	0x09, r24	; 9
 200:	80 b5       	in	r24, 0x20	; 32
 202:	8f 77       	andi	r24, 0x7F	; 127
 204:	80 bd       	out	0x20, r24	; 32
 206:	da 01       	movw	r26, r20
 208:	c9 01       	movw	r24, r18
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	a1 09       	sbc	r26, r1
 20e:	b1 09       	sbc	r27, r1
 210:	89 2f       	mov	r24, r25
 212:	9a 2f       	mov	r25, r26
 214:	ab 2f       	mov	r26, r27
 216:	bb 27       	eor	r27, r27
 218:	80 bd       	out	0x20, r24	; 32
 21a:	08 95       	ret
		default:UBRRL =BAUD_PRESCALE_NORMAL;CLR_BIT(UCSRC,URSEL);UBRRH = (BAUD_PRESCALE_NORMAL >> 8);break;
 21c:	db 01       	movw	r26, r22
 21e:	ca 01       	movw	r24, r20
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	aa 1f       	adc	r26, r26
 226:	bb 1f       	adc	r27, r27
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	aa 1f       	adc	r26, r26
 22e:	bb 1f       	adc	r27, r27
 230:	9c 01       	movw	r18, r24
 232:	ad 01       	movw	r20, r26
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	44 1f       	adc	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	22 0f       	add	r18, r18
 23e:	33 1f       	adc	r19, r19
 240:	44 1f       	adc	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	72 e1       	ldi	r23, 0x12	; 18
 248:	8a e7       	ldi	r24, 0x7A	; 122
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 b2 01 	call	0x364	; 0x364 <__udivmodsi4>
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	82 0f       	add	r24, r18
 254:	89 b9       	out	0x09, r24	; 9
 256:	80 b5       	in	r24, 0x20	; 32
 258:	8f 77       	andi	r24, 0x7F	; 127
 25a:	80 bd       	out	0x20, r24	; 32
 25c:	da 01       	movw	r26, r20
 25e:	c9 01       	movw	r24, r18
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	a1 09       	sbc	r26, r1
 264:	b1 09       	sbc	r27, r1
 266:	89 2f       	mov	r24, r25
 268:	9a 2f       	mov	r25, r26
 26a:	ab 2f       	mov	r26, r27
 26c:	bb 27       	eor	r27, r27
 26e:	80 bd       	out	0x20, r24	; 32
 270:	08 95       	ret

00000272 <USART_TRASMIT>:

	}
	//*******************************************************************************************************
	void USART_TRASMIT(unsigned char data)
	{
		while (! (UCSRA & (1<<UDRE))); 
 272:	5d 9b       	sbis	0x0b, 5	; 11
 274:	fe cf       	rjmp	.-4      	; 0x272 <USART_TRASMIT>
		//while(!(READ_BIT(UCSRA,UDRE)));
		UDR=data;
 276:	8c b9       	out	0x0c, r24	; 12
 278:	08 95       	ret

0000027a <USART_RECIVE>:
	}
	//*******************************************************************************************************
	unsigned char USART_RECIVE()
	{while ((UCSRA & (1 << RXC)) == 0);
 27a:	5f 9b       	sbis	0x0b, 7	; 11
 27c:	fe cf       	rjmp	.-4      	; 0x27a <USART_RECIVE>
		//while(!(READ_BIT(UCSRA,RXC)));
		return (UDR);
 27e:	8c b1       	in	r24, 0x0c	; 12
	}
 280:	08 95       	ret

00000282 <USART_DATA_SETTING>:
	//*******************************************************************************************************
	void USART_DATA_SETTING( USART_COMMANDS num, USART_COMMANDS parity, USART_COMMANDS stop_bits)
	{//Choose USCRC TO WRITE IN IT INSTEAD OF UBRRH
		SET_BIT(UCSRC,URSEL);
 282:	90 b5       	in	r25, 0x20	; 32
 284:	90 68       	ori	r25, 0x80	; 128
 286:	90 bd       	out	0x20, r25	; 32
		switch(num)
 288:	87 30       	cpi	r24, 0x07	; 7
 28a:	d9 f0       	breq	.+54     	; 0x2c2 <USART_DATA_SETTING+0x40>
 28c:	28 f4       	brcc	.+10     	; 0x298 <USART_DATA_SETTING+0x16>
 28e:	85 30       	cpi	r24, 0x05	; 5
 290:	41 f0       	breq	.+16     	; 0x2a2 <USART_DATA_SETTING+0x20>
 292:	86 30       	cpi	r24, 0x06	; 6
 294:	71 f0       	breq	.+28     	; 0x2b2 <USART_DATA_SETTING+0x30>
 296:	2d c0       	rjmp	.+90     	; 0x2f2 <USART_DATA_SETTING+0x70>
 298:	88 30       	cpi	r24, 0x08	; 8
 29a:	d9 f0       	breq	.+54     	; 0x2d2 <USART_DATA_SETTING+0x50>
 29c:	89 30       	cpi	r24, 0x09	; 9
 29e:	09 f1       	breq	.+66     	; 0x2e2 <USART_DATA_SETTING+0x60>
 2a0:	28 c0       	rjmp	.+80     	; 0x2f2 <USART_DATA_SETTING+0x70>
		{
			case FIVE :CLR_BIT(UCSRC,UCSZ0);CLR_BIT(UCSRC,UCSZ1);CLR_BIT(UCSRB,UCSZ2);break;
 2a2:	80 b5       	in	r24, 0x20	; 32
 2a4:	8d 7f       	andi	r24, 0xFD	; 253
 2a6:	80 bd       	out	0x20, r24	; 32
 2a8:	80 b5       	in	r24, 0x20	; 32
 2aa:	8b 7f       	andi	r24, 0xFB	; 251
 2ac:	80 bd       	out	0x20, r24	; 32
 2ae:	52 98       	cbi	0x0a, 2	; 10
 2b0:	27 c0       	rjmp	.+78     	; 0x300 <USART_DATA_SETTING+0x7e>
		    case SIX :SET_BIT(UCSRC,UCSZ0);CLR_BIT(UCSRC,UCSZ1);CLR_BIT(UCSRB,UCSZ2);break;
 2b2:	80 b5       	in	r24, 0x20	; 32
 2b4:	82 60       	ori	r24, 0x02	; 2
 2b6:	80 bd       	out	0x20, r24	; 32
 2b8:	80 b5       	in	r24, 0x20	; 32
 2ba:	8b 7f       	andi	r24, 0xFB	; 251
 2bc:	80 bd       	out	0x20, r24	; 32
 2be:	52 98       	cbi	0x0a, 2	; 10
 2c0:	1f c0       	rjmp	.+62     	; 0x300 <USART_DATA_SETTING+0x7e>
			case SEVEN :CLR_BIT(UCSRC,UCSZ0);SET_BIT(UCSRC,UCSZ1);CLR_BIT(UCSRB,UCSZ2);break;
 2c2:	80 b5       	in	r24, 0x20	; 32
 2c4:	8d 7f       	andi	r24, 0xFD	; 253
 2c6:	80 bd       	out	0x20, r24	; 32
 2c8:	80 b5       	in	r24, 0x20	; 32
 2ca:	84 60       	ori	r24, 0x04	; 4
 2cc:	80 bd       	out	0x20, r24	; 32
 2ce:	52 98       	cbi	0x0a, 2	; 10
 2d0:	17 c0       	rjmp	.+46     	; 0x300 <USART_DATA_SETTING+0x7e>
			case EIGHT :SET_BIT(UCSRC,UCSZ0);SET_BIT(UCSRC,UCSZ1);CLR_BIT(UCSRB,UCSZ2);break;
 2d2:	80 b5       	in	r24, 0x20	; 32
 2d4:	82 60       	ori	r24, 0x02	; 2
 2d6:	80 bd       	out	0x20, r24	; 32
 2d8:	80 b5       	in	r24, 0x20	; 32
 2da:	84 60       	ori	r24, 0x04	; 4
 2dc:	80 bd       	out	0x20, r24	; 32
 2de:	52 98       	cbi	0x0a, 2	; 10
 2e0:	0f c0       	rjmp	.+30     	; 0x300 <USART_DATA_SETTING+0x7e>
			case NINE :SET_BIT(UCSRC,UCSZ0);SET_BIT(UCSRC,UCSZ1);SET_BIT(UCSRB,UCSZ2);break;
 2e2:	80 b5       	in	r24, 0x20	; 32
 2e4:	82 60       	ori	r24, 0x02	; 2
 2e6:	80 bd       	out	0x20, r24	; 32
 2e8:	80 b5       	in	r24, 0x20	; 32
 2ea:	84 60       	ori	r24, 0x04	; 4
 2ec:	80 bd       	out	0x20, r24	; 32
 2ee:	52 9a       	sbi	0x0a, 2	; 10
 2f0:	07 c0       	rjmp	.+14     	; 0x300 <USART_DATA_SETTING+0x7e>
			default:SET_BIT(UCSRC,UCSZ0);SET_BIT(UCSRC,UCSZ1);SET_BIT(UCSRB,UCSZ2);break;
 2f2:	80 b5       	in	r24, 0x20	; 32
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	80 bd       	out	0x20, r24	; 32
 2f8:	80 b5       	in	r24, 0x20	; 32
 2fa:	84 60       	ori	r24, 0x04	; 4
 2fc:	80 bd       	out	0x20, r24	; 32
 2fe:	52 9a       	sbi	0x0a, 2	; 10
			
		}
		switch(parity)
 300:	61 30       	cpi	r22, 0x01	; 1
 302:	59 f0       	breq	.+22     	; 0x31a <USART_DATA_SETTING+0x98>
 304:	18 f0       	brcs	.+6      	; 0x30c <USART_DATA_SETTING+0x8a>
 306:	62 30       	cpi	r22, 0x02	; 2
 308:	79 f0       	breq	.+30     	; 0x328 <USART_DATA_SETTING+0xa6>
 30a:	15 c0       	rjmp	.+42     	; 0x336 <USART_DATA_SETTING+0xb4>
		{//parity disable
			case NO_PARITY :CLR_BIT(UCSRC,UPM0);CLR_BIT(UCSRC,UPM1);break;
 30c:	80 b5       	in	r24, 0x20	; 32
 30e:	8f 7e       	andi	r24, 0xEF	; 239
 310:	80 bd       	out	0x20, r24	; 32
 312:	80 b5       	in	r24, 0x20	; 32
 314:	8f 7d       	andi	r24, 0xDF	; 223
 316:	80 bd       	out	0x20, r24	; 32
 318:	14 c0       	rjmp	.+40     	; 0x342 <USART_DATA_SETTING+0xc0>
			//EVEN PARITY
			case EVEN_PARITY :CLR_BIT(UCSRC,UPM0); SET_BIT(UCSRC,UPM1);break;
 31a:	80 b5       	in	r24, 0x20	; 32
 31c:	8f 7e       	andi	r24, 0xEF	; 239
 31e:	80 bd       	out	0x20, r24	; 32
 320:	80 b5       	in	r24, 0x20	; 32
 322:	80 62       	ori	r24, 0x20	; 32
 324:	80 bd       	out	0x20, r24	; 32
 326:	0d c0       	rjmp	.+26     	; 0x342 <USART_DATA_SETTING+0xc0>
			//ODD PARITY
			case ODD_PARITY :SET_BIT(UCSRC,UPM0);SET_BIT(UCSRC,UPM1);break;
 328:	80 b5       	in	r24, 0x20	; 32
 32a:	80 61       	ori	r24, 0x10	; 16
 32c:	80 bd       	out	0x20, r24	; 32
 32e:	80 b5       	in	r24, 0x20	; 32
 330:	80 62       	ori	r24, 0x20	; 32
 332:	80 bd       	out	0x20, r24	; 32
 334:	06 c0       	rjmp	.+12     	; 0x342 <USART_DATA_SETTING+0xc0>
			//default no parity 
			default:CLR_BIT(UCSRC,UPM0);CLR_BIT(UCSRC,UPM1);break;
 336:	80 b5       	in	r24, 0x20	; 32
 338:	8f 7e       	andi	r24, 0xEF	; 239
 33a:	80 bd       	out	0x20, r24	; 32
 33c:	80 b5       	in	r24, 0x20	; 32
 33e:	8f 7d       	andi	r24, 0xDF	; 223
 340:	80 bd       	out	0x20, r24	; 32
		}
		switch(stop_bits)
 342:	41 30       	cpi	r20, 0x01	; 1
 344:	19 f0       	breq	.+6      	; 0x34c <USART_DATA_SETTING+0xca>
 346:	42 30       	cpi	r20, 0x02	; 2
 348:	29 f0       	breq	.+10     	; 0x354 <USART_DATA_SETTING+0xd2>
 34a:	08 c0       	rjmp	.+16     	; 0x35c <USART_DATA_SETTING+0xda>
		{case ONE:CLR_BIT(UCSRC,USBS);break;
 34c:	80 b5       	in	r24, 0x20	; 32
 34e:	87 7f       	andi	r24, 0xF7	; 247
 350:	80 bd       	out	0x20, r24	; 32
 352:	08 95       	ret
		case TWO:SET_BIT(UCSRC,USBS);break;
 354:	80 b5       	in	r24, 0x20	; 32
 356:	88 60       	ori	r24, 0x08	; 8
 358:	80 bd       	out	0x20, r24	; 32
 35a:	08 95       	ret
		default:CLR_BIT(UCSRC,USBS);break;
 35c:	80 b5       	in	r24, 0x20	; 32
 35e:	87 7f       	andi	r24, 0xF7	; 247
 360:	80 bd       	out	0x20, r24	; 32
 362:	08 95       	ret

00000364 <__udivmodsi4>:
 364:	a1 e2       	ldi	r26, 0x21	; 33
 366:	1a 2e       	mov	r1, r26
 368:	aa 1b       	sub	r26, r26
 36a:	bb 1b       	sub	r27, r27
 36c:	fd 01       	movw	r30, r26
 36e:	0d c0       	rjmp	.+26     	; 0x38a <__udivmodsi4_ep>

00000370 <__udivmodsi4_loop>:
 370:	aa 1f       	adc	r26, r26
 372:	bb 1f       	adc	r27, r27
 374:	ee 1f       	adc	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	a2 17       	cp	r26, r18
 37a:	b3 07       	cpc	r27, r19
 37c:	e4 07       	cpc	r30, r20
 37e:	f5 07       	cpc	r31, r21
 380:	20 f0       	brcs	.+8      	; 0x38a <__udivmodsi4_ep>
 382:	a2 1b       	sub	r26, r18
 384:	b3 0b       	sbc	r27, r19
 386:	e4 0b       	sbc	r30, r20
 388:	f5 0b       	sbc	r31, r21

0000038a <__udivmodsi4_ep>:
 38a:	66 1f       	adc	r22, r22
 38c:	77 1f       	adc	r23, r23
 38e:	88 1f       	adc	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	1a 94       	dec	r1
 394:	69 f7       	brne	.-38     	; 0x370 <__udivmodsi4_loop>
 396:	60 95       	com	r22
 398:	70 95       	com	r23
 39a:	80 95       	com	r24
 39c:	90 95       	com	r25
 39e:	9b 01       	movw	r18, r22
 3a0:	ac 01       	movw	r20, r24
 3a2:	bd 01       	movw	r22, r26
 3a4:	cf 01       	movw	r24, r30
 3a6:	08 95       	ret

000003a8 <_exit>:
 3a8:	f8 94       	cli

000003aa <__stop_program>:
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <__stop_program>
